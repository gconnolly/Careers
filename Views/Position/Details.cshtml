@model Careers.Models.PositionDetailViewModel
@using GridMvc.Html

@{
    ViewBag.Title = Model.Title;
}

<h2>@Model.Title</h2>
<hr />
<div class="row">
    <div class="col-md-10">
        <p>@Model.Description</p>

        @if (Model.CanViewApplications)
        {
            <h3>Applicants</h3>
            @Html.Grid(Model.Applications).Named("applicationsGrid").Columns(columns =>
                  {
                      columns.Add()
                          .Sanitized(false)
                          .Encoded(false)
                          .Titled("Candidate")
                          .Sortable(true)
                          .RenderValueAs(a => Html.ActionLink(a.UserName, "Details", "Application", new { id = a.Id }, new { }));
                      columns.Add(a => a.Status)
                          .Titled("Status")
                          .Filterable(true)
                          .SetFilterWidgetType("ApplicationStatusFilterWidget")
                          .Sortable(true)
                          .RenderValueAs(a => a.Status.ToString());
                      columns.Add(a => a.AppliedOn)
                          .Titled("Applied On")
                          .Sortable(true)
                          .RenderValueAs(a => a.AppliedOn);
                  }).WithPaging(25)

        }
        @if (Model.HasAppliedToPosition)
        {
            <p>You @Html.ActionLink("applied", "Details", "Application", new { id = Model.UserApplicationId }, new { }) to this position on @Model.UserAppliedOn.ToShortDateString()</p>
        }
    </div>
    <div class="col-md-2">
        <div class="btn-group-vertical">
            @if (Model.CanApplyToPosition)
            {
                @Html.ActionLink("Apply", "Create", "Application", new { id = Model.PositionId }, new { @class = "btn btn-default" })
            }
            @if (Model.CanRemoveApplication)
            {
                @Html.ActionLink("Remove", "Remove", "Application", new { id = Model.UserApplicationId }, new { onclick = "return confirm('Are you sure you want to remove this application?')", @class = "btn btn-default" })
            }
            @if (Model.CanModifyPosition)
            {
                @Html.ActionLink("Edit", "Edit", "Position", new { id = Model.PositionId }, new { @class = "btn btn-default" })
            }
            @Html.ActionLink("Return To Listing", "Index", "Position", new { id = Model.PositionId }, new { @class = "btn btn-default" })
        </div>
    </div>
</div>
<script type="text/javascript">
    /***
    * ApplicationStatusFilterWidget - Provides filter user interface for customer name column in this project
    * This widget onRenders select list with avaliable customers.
    */

    function ApplicationStatusFilterWidget() {
        /***
        * This method must return type of registered widget type in 'SetFilterWidgetType' method
        */
        this.getAssociatedTypes = function () {
            return ["ApplicationStatusFilterWidget"];
        };
        /***
        * This method invokes when filter widget was shown on the page
        */
        this.onShow = function () {
            /* Place your on show logic here */
        };

        this.showClearFilterButton = function () {
            return true;
        };
        /***
        * This method will invoke when user was clicked on filter button.
        * container - html element, which must contain widget layout;
        * lang - current language settings;
        * typeName - current column type (if widget assign to multipile types, see: getAssociatedTypes);
        * values - current filter values. Array of objects [{filterValue: '', filterType:'1'}];
        * cb - callback function that must invoked when user want to filter this column. Widget must pass filter type and filter value.
        * data - widget data passed from the server
        */
        this.onRender = function (container, lang, typeName, values, cb, data) {
            //store parameters:
            this.cb = cb;
            this.container = container;
            this.lang = lang;

            //this filterwidget demo supports only 1 filter value for column column
            this.value = values.length > 0 ? values[0] : { filterType: 1, filterValue: "" };

            this.renderWidget(); //onRender filter widget

            //get list with customers
            var applicationStatuslist = this.container.find(".applicationStatuslist");

            //save current context:
            var $context = this;
            //register onclick event handler
            applicationStatuslist.change(function () {
                //invoke callback with selected filter values:
                var values = [{ filterValue: $(this).val(), filterType: 1 /* Equals */ }];
                $context.cb(values);
            });
        };

        this.renderWidget = function () {
            var html = '<p>Select status to filter:</p>\
                        <select style="width:250px;" class="grid-filter-type applicationStatuslist form-control">',
                items = [
                    'New',
                    'Contact',
                    'Interview',
                    'Hire',
                    'Removed',
                    'Reject'
                ];
            
            for (var i = 0; i < items.length; i++) {
                html += '<option ' + (items[i] == this.value.filterValue ? 'selected="selected"' : '') + ' value="' + items[i] + '">' + items[i] + '</option>';
            }

            html += '</select>';
            this.container.append(html);
        };
    }

    //Initialize Application Status Filter
    $(function () {
        pageGrids.applicationsGrid.addFilterWidget(new ApplicationStatusFilterWidget());
    });

    
</script>
